{"version":3,"sources":["images/logo trivia sem tracado.png","redux/actions/index.js","pages/Login.js","pages/Settings.js","components/Header.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","pages/GameShuffle.js","App.js","redux/reducers/player.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["module","exports","storeScore","payload","type","Login","state","inputEmail","inputName","desabilitado","handleChange","event","target","name","value","setState","desabilitar","handleSettingsClick","props","history","push","handleClick","a","gravatar","fetch","response","json","resultado","salvarStorage","localStorage","setItem","token","email","data","storePlayerDispatch","hashedEmail","md5","toString","then","res","photo","url","this","className","src","triviaLogo","alt","htmlFor","data-testid","id","onChange","disabled","onClick","to","React","Component","connect","dispatch","storePlayer","Settings","Header","score","pathname","document","location","defaultProps","player","photoUrl","Game","questionList","nextQuestion","qNum","endQuestions","time","level","difficulty","currentInterval","mathRandomValue","componentDidMount","fetchQuestions","Math","random","errorCode","getItem","response_code","results","firstQuestion","setDifficulty","renderQuestions","calculateScore","storeScoreDispatch","correct","data-answer","key","correct_answer","incorrects","incorrect_answers","map","resp","index","answersArray","answerArray2","applyBorderColor","action","isNextClick","answersDiv","parent","parentElement","children","Array","from","querySelectorAll","forEach","btn","dataset","answer","style","border","renderText","title","handleClickNext","querySelector","previousElementSibling","timer","handleBtnsDisabling","clearInterval","interval","setInterval","btnCorrect","btnsIncorrects","data-name","role","e","Feedback","updateLocalStorage","picture","currentPlayerRankingData","ranking","rankingArray","JSON","parse","newRankingArray","stringify","handleClickPlayAgain","handleClickRanking","assertions","Ranking","getRankingAndRender","sortedRankingArray","sort","first","sec","el","i","rankingObj","GameShuffle","loaded","optionsDisabled","console","log","result","App","exact","path","component","DEFAULT_STATE","gravatarEmail","playerReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","window","Cypress","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.15e0fd4c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo trivia sem tracado.e0674fb4.png\";","export const STORE_PLAYER = 'STORE_PLAYER';\nexport const STORE_SCORE = 'STORE_SCORE';\n\nexport const storePlayer = (data) => ({\n  type: STORE_PLAYER,\n  payload: data,\n});\n\nexport const storeScore = (payload) => ({\n  type: STORE_SCORE,\n  payload,\n});\n","// Funcionalidades\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { storePlayer } from '../redux/actions/index';\nimport triviaLogo from '../images/logo trivia sem tracado.png';\n\n// Importações\n\nclass Login extends React.Component {\n    state = {\n      inputEmail: '',\n      inputName: '',\n      desabilitado: true,\n    }\n\n    handleChange = (event) => {\n      const { target: { name, value } } = event;\n      this.setState({\n        [name]: value,\n      }, () => this.desabilitar());\n    }\n\n    desabilitar = () => {\n      const { inputEmail, inputName } = this.state;\n      if (inputEmail && inputName) {\n        this.setState({ desabilitado: false });\n      } else {\n        this.setState({ desabilitado: true });\n      }\n    }\n\n    handleSettingsClick = () => {\n      const { history } = this.props;\n      history.push('./settings');\n    }\n\n    handleClick = async () => {\n      const { inputName, inputEmail } = this.state;\n      this.gravatar(inputEmail, inputName);\n      const { history } = this.props;\n      const link = 'https://opentdb.com/api_token.php?command=request';\n      const response = await fetch(link);\n      const resultado = await response.json();\n      const salvarStorage = localStorage.setItem('token', resultado.token);\n      history.push('/game');\n      return salvarStorage;\n    }\n\n    gravatar = (email, name) => {\n      let data = {};\n      const { storePlayerDispatch } = this.props;\n      const hashedEmail = md5(email).toString();\n      fetch(`https://www.gravatar.com/avatar/${hashedEmail}`)\n        .then((res) => {\n          data = { photo: res.url, name, email };\n          storePlayerDispatch(data);\n        });\n    }\n\n    render() {\n      const { inputEmail, inputName, desabilitado } = this.state;\n      return (\n        <div className=\"login-container\">\n          <img src={ triviaLogo } alt=\"logo-trivia\" className=\"trivia-logo\" />\n          <form className=\"login-form\">\n            <label htmlFor=\"email\">\n              Digite o seu E-mail\n              <br />\n              <input\n                className=\"login-input\"\n                name=\"inputEmail\"\n                value={ inputEmail }\n                type=\"email\"\n                data-testid=\"input-gravatar-email\"\n                id=\"email\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"name\">\n              Digite o seu Nome\n              <br />\n              <input\n                className=\"login-input\"\n                name=\"inputName\"\n                value={ inputName }\n                type=\"text\"\n                data-testid=\"input-player-name\"\n                id=\"name\"\n                onChange={ this.handleChange }\n              />\n            </label>\n            <button\n              className=\"btn\"\n              name=\"btnPlay\"\n              disabled={ desabilitado }\n              onClick={ this.handleClick }\n              type=\"button\"\n              data-testid=\"btn-play\"\n            >\n              Play Classic\n            </button>\n            <button\n              className=\"btn\"\n              name=\"btn-shuffle-mode\"\n              disabled={ desabilitado }\n              type=\"button\"\n            >\n              <Link to=\"/shuffle\" className=\"btn--link-shuffle\">Play Shuffle</Link>\n            </button>\n          </form>\n          <button\n            className=\"login-config-btn btn\"\n            name=\"btnSettings\"\n            onClick={ this.handleSettingsClick }\n            type=\"button\"\n            data-testid=\"btn-settings\"\n          >\n            Configurações\n          </button>\n        </div>\n      );\n    }\n}\n\nLogin.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  push: PropTypes.func,\n  savePhoto: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  storePlayerDispatch: (data) => dispatch(storePlayer(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\n\nclass Settings extends React.Component {\n  render() {\n    return (\n      <div>\n        <h3 data-testid=\"settings-title\">Configurações</h3>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n// BEM: BLOCK-ELEMENT-MODIFICADOR\n// header\n// header__score\n// header__score--green\nclass Header extends React.Component {\n  render() {\n    const { photo, name, score } = this.props;\n    const { pathname } = document.location;\n    return (\n      <header\n        className={ `header ${pathname === '/feedback' ? 'header--feedback' : ''}` }\n      >\n        <div>\n          <img src={ photo } alt={ name } data-testid=\"header-profile-picture\" />\n          <span data-testid=\"header-player-name\">{ name }</span>\n        </div>\n        <p data-testid=\"header-score\">\n          Pontuação:\n          {' '}\n          { score }\n\n        </p>\n      </header>\n    );\n  }\n}\n\nHeader.propTypes = {\n  photo: PropTypes.string,\n};\n\nHeader.propTypes = { name: PropTypes.string,\n  score: PropTypes.number }.isRequired;\n\nHeader.defaultProps = {\n  photo: 'https://www.gravatar.com/avatar/c19ad9dbaf91c5533605fbf985177ccc',\n};\n\nconst mapStateToProps = (state) => ({\n  photo: state.player.photoUrl,\n  name: state.player.name,\n  score: state.player.score,\n});\n\nexport default connect(mapStateToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { storeScore } from '../redux/actions/index';\n\nclass Game extends React.Component {\n  state = {\n    questionList: [],\n    nextQuestion: false,\n    qNum: 0,\n    endQuestions: false,\n    time: 30,\n    level: '',\n    difficulty: 0,\n    currentInterval: '',\n    mathRandomValue: '',\n  }\n\n  componentDidMount = () => {\n    this.fetchQuestions();\n    // this.timer();\n    this.setState({ mathRandomValue: Math.random() });\n  }\n\n  fetchQuestions = async () => {\n    const { history } = this.props;\n    const errorCode = 3;\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    const { response_code: responseCode } = data;\n    if (responseCode === errorCode) {\n      history.push('/');\n    }\n    const { results } = data;\n\n    const [firstQuestion] = results;\n\n    const { difficulty: level } = firstQuestion;\n\n    this.setState({\n      questionList: results, level }, () => {\n      this.setDifficulty();\n      this.renderQuestions();\n    });\n  }\n\n  setDifficulty = () => {\n    const { level } = this.state;\n    switch (level) {\n    case 'hard':\n      this.setState({ difficulty: 3 });\n      break;\n    case 'medium':\n      this.setState({ difficulty: 2 });\n      break;\n    case 'easy':\n      this.setState({ difficulty: 1 });\n      break;\n    default:\n      return 0;\n    }\n  }\n\n  calculateScore = () => {\n    const { storeScoreDispatch } = this.props;\n    const ten = 10;\n    const { time, difficulty } = this.state;\n    const result = ten + (time * difficulty);\n    storeScoreDispatch(result);\n  }\n\n  renderQuestions = () => {\n    const { questionList, qNum, mathRandomValue } = this.state;\n    if (!questionList[qNum] || !mathRandomValue) return null;\n    const correct = (\n      <button\n        className=\"btn\"\n        data-answer=\"correct\"\n        key=\"correct\"\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        onClick={ this.calculateScore }\n      >\n        {questionList[qNum].correct_answer}\n      </button>\n    );\n\n    const incorrects = questionList[qNum].incorrect_answers.map(\n      (resp, index) => (\n        <button\n          className=\"btn\"\n          data-answer=\"incorrect\"\n          key={ index }\n          type=\"button\"\n          data-testid={ `wrong-answer-${index}` }\n        >\n          {resp}\n        </button>),\n    );\n    const answersArray = [correct, ...incorrects];\n    const answerArray2 = [...incorrects, correct];\n    const random = mathRandomValue;\n    const randomLimit = 0.55;\n\n    if (random < randomLimit) {\n      // this.setState({ shuffledQuestions: answersArray });\n      return answersArray;\n    }\n    // this.setState({ shuffledQuestions: answerArray2 });\n    return answerArray2;\n  }\n\n  /**\n   * Apply CSS styles accordingly when either one of the answers's btn or the \"Next\" btn is clicked.\n   * @param { HTMLButtonElement } target The target element that on which the click event occured.\n   * @param { boolean } action If true, the function renders colored borders on the buttons; otherwise the borders' style are set to 'none'.\n   * @param { boolean } isNextClick If true, the parent element from which to traverse down to the children will be accepted via the parameter \"answersDiv\"\n   * @param { HTMLDivElement } answersDiv this param is only used when the \"handleClickNext\" function is called; its value is the div element that contains the answers buttons.\n   * @returns { void } The function does not return anything.\n   */\n  applyBorderColor = (target, action, isNextClick = false, answersDiv = null) => {\n    if (target && !target.type && action) return null;\n    const parent = isNextClick ? answersDiv : target.parentElement;\n    const children = Array.from(parent.querySelectorAll('button'));\n\n    children.forEach((btn) => {\n      if (btn.dataset.answer === 'correct') {\n        btn.style.border = `${action ? '3px solid rgb(6 ,240, 15)' : 'thin inset #555'}`;\n      } else {\n        btn.style.border = `${action ? '3px solid rgb(255, 0, 0)' : 'thin inset #555'}`;\n      }\n    });\n    this.setState({ nextQuestion: true });\n  }\n\n  renderText = (title) => {\n    const { questionList, qNum } = this.state;\n    if (questionList[qNum]) return questionList[qNum][`${title}`];\n    return null;\n  }\n\n  handleClickNext = () => {\n    const btnNext = document.querySelector('button[data-name=\"btn-next\"]');\n    const answersDiv = btnNext.parentElement.previousElementSibling;\n    const { qNum } = this.state;\n    const three = 3;\n    if (qNum > three) {\n      this.setState({ endQuestions: true });\n    } else {\n      this.setState({\n        qNum: qNum + 1,\n        nextQuestion: true,\n        time: 30,\n      }, () => {\n        this.timer();\n        this.handleBtnsDisabling(false);\n        this.applyBorderColor(null, false, true, answersDiv);\n        this.setState({ mathRandomValue: Math.random() });\n      });\n    }\n  }\n\n  timer = () => {\n    const { currentInterval } = this.state;\n    clearInterval(currentInterval);\n    const ONE_SECOND = 1000;\n    const interval = setInterval(() => {\n      this.setState((state) => ({ time: state.time - 1 }), () => {\n        const { time } = this.state;\n        if (time === 0) {\n          clearInterval(interval);\n          this.handleBtnsDisabling(true);\n        }\n      });\n    }, ONE_SECOND);\n    this.setState({ currentInterval: interval });\n  }\n\n  handleBtnsDisabling = (action) => {\n    const btnCorrect = document.querySelector('button[data-answer=\"correct\"]');\n    const btnsIncorrects = document.querySelectorAll('button[data-answer=\"incorrect\"]');\n    const btns = [btnCorrect, ...Array.from(btnsIncorrects)];\n    btns.forEach((btn) => { btn.disabled = action; });\n  }\n\n  render() {\n    const { time, nextQuestion, endQuestions } = this.state;\n    return (\n      <>\n        <Header />\n        <section className=\"game-container\">\n          <div className=\"questions-container\">\n            <p className=\"questions-category\" data-testid=\"question-category\">\n              { this.renderText('category') }\n            </p>\n            <p className=\"questions-question\" data-testid=\"question-text\">\n              { this.renderText('question') }\n            </p>\n            <p>{ `Tempo restante: ${time}` }</p>\n\n            <div\n              data-name=\"answers-container\"\n              role=\"presentation\"\n              type=\"div\"\n              data-testid=\"answer-options\"\n              onClick={ (e) => this.applyBorderColor(e.target, true) }\n            >\n              { this.renderQuestions() }\n            </div>\n            <div>\n              { endQuestions && <Redirect to=\"/feedback\" /> }\n              { nextQuestion && (\n                <button\n                  data-name=\"btn-next\"\n                  type=\"button\"\n                  data-testid=\"btn-next\"\n                  onClick={ this.handleClickNext }\n                >\n                  Próxima\n                </button>)}\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  storeScoreDispatch: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeScoreDispatch: (payload) => dispatch(storeScore(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\n\nclass Feedback extends React.Component {\n    componentDidMount = () => {\n      this.updateLocalStorage();\n    }\n\n    updateLocalStorage = () => {\n      const { name, picture, score } = this.props;\n      if (!name) return null;\n      const currentPlayerRankingData = { name, score, picture };\n      const ranking = localStorage.getItem('ranking');\n      const rankingArray = ranking ? JSON.parse(ranking) : [];\n      const newRankingArray = [...rankingArray, currentPlayerRankingData];\n      localStorage.setItem('ranking', JSON.stringify(newRankingArray));\n    }\n\n    handleClickPlayAgain = () => {\n      const { history } = this.props;\n      history.push('/');\n    }\n\n    handleClickRanking = () => {\n      const { history } = this.props;\n      history.push('/ranking');\n    }\n\n    render() {\n      const { score, assertions } = this.props;\n      const numberOfRightAnswers = 3;\n      return (\n        <>\n          <Header />\n          <div className=\"feedback-container\">\n            <p data-testid=\"feedback-total-score\">\n              Pontuação final:\n              {' '}\n              { score }\n            </p>\n            <p data-testid=\"feedback-total-question\">\n              Acertos:\n              {' '}\n              { assertions }\n            </p>\n            { assertions < numberOfRightAnswers\n              ? <p data-testid=\"feedback-text\">Could be better...</p>\n              : <p data-testid=\"feedback-text\">Well Done!</p>}\n            <button\n              className=\"btn\"\n              name=\"btnPlayAgain\"\n              onClick={ this.handleClickPlayAgain }\n              type=\"button\"\n              data-testid=\"btn-play-again\"\n            >\n              Play Again\n            </button>\n            <button\n              className=\"btn\"\n              name=\"btnRanking\"\n              onClick={ this.handleClickRanking }\n              type=\"button\"\n              data-testid=\"btn-ranking\"\n            >\n              Ranking\n            </button>\n          </div>\n        </>\n      );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.player.score,\n  assertions: state.player.assertions,\n  name: state.player.name,\n  picture: state.player.photoUrl,\n});\n\nFeedback.propTypes = {\n  score: PropTypes.number,\n  assertions: PropTypes.number,\n  history: PropTypes.objectOf(PropTypes.any),\n  name: PropTypes.string,\n  picture: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Ranking extends React.Component {\n  // {\n  //   ranking: [\n  //     { name: nome_da_pessoa, score: 10, picture: url_da_foto_no_gravatar }\n  //   ],\n  //   token: token_recebido_pela_API\n  // }\n\n    getRankingAndRender = () => {\n      const ranking = JSON.parse(localStorage.getItem('ranking'));\n      if (!ranking) return null;\n      const sortedRankingArray = ranking.sort((first, sec) => sec.score - first.score);\n\n      const markup = (rankingObj, index) => (\n        <div style={ { border: '1px solid black' } } key={ `${rankingObj.name}${index}` }>\n          <p data-testid={ `player-name-${index}` }>{rankingObj.name}</p>\n          <p data-testid={ `player-score-${index}` }>{rankingObj.score}</p>\n        </div>\n      );\n\n      const renderMarkup = sortedRankingArray.map((el, i) => markup(el, i));\n\n      return renderMarkup;\n    }\n\n    handleClickPlayAgain = () => {\n      const { history } = this.props;\n      history.push('/');\n    }\n\n    render() {\n      return (\n        <div>\n          <h1 data-testid=\"ranking-title\">Ranking</h1>\n          <button\n            name=\"btnPlayAgain\"\n            onClick={ this.handleClickPlayAgain }\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n          >\n            Play Again\n          </button>\n          { this.getRankingAndRender() }\n        </div>\n      );\n    }\n}\n\nRanking.propTypes = {\n  // score: PropTypes.number,\n  // assertions: PropTypes.number,\n  history: PropTypes.objectOf(PropTypes.any),\n}.isRequired;\n\nexport default Ranking;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { storeScore } from '../redux/actions/index';\n\nclass GameShuffle extends React.Component {\n  state = {\n    questionList: [],\n    loaded: false,\n    nextQuestion: false,\n    qNum: 0,\n    endQuestions: false,\n    time: 30,\n    optionsDisabled: false,\n    level: '',\n    difficulty: 0,\n  }\n\n  componentDidMount = () => {\n    this.fetchQuestions();\n    this.timer();\n    // this.setDifficulty();\n  }\n\n  fetchQuestions = async () => {\n    const { history } = this.props;\n    const errorCode = 3;\n    const token = localStorage.getItem('token');\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const data = await response.json();\n    const { response_code: responseCode } = data;\n    if (responseCode === errorCode) {\n      history.push('/');\n    }\n    console.log(data);\n    const { results } = data;\n    const [firstQuestion] = results;\n    console.log(firstQuestion);\n    const { difficulty: level } = firstQuestion;\n    console.log(level);\n\n    this.setState({\n      questionList: results, loaded: true, level }, () => this.setDifficulty());\n  }\n\n  setDifficulty = () => {\n    const { level } = this.state;\n    console.log(level);\n    switch (level) {\n    case 'hard':\n      this.setState({ difficulty: 3 });\n      break;\n    case 'medium':\n      this.setState({ difficulty: 2 });\n      break;\n    case 'easy':\n      this.setState({ difficulty: 1 });\n      break;\n    default:\n      return 0;\n    }\n  }\n\n  calculateScore = () => {\n    const { storeScoreDispatch } = this.props;\n    const ten = 10;\n    const { time, difficulty } = this.state;\n    console.log(time, difficulty);\n    const result = ten + (time * difficulty);\n    console.log(typeof result, result);\n    storeScoreDispatch(result);\n  }\n\n  renderQuestions = () => {\n    const { questionList, qNum, optionsDisabled } = this.state;\n    if (!questionList[qNum]) return null;\n    const correct = (\n      <button\n        className=\"btn\"\n        data-answer=\"correct\"\n        key=\"correct\"\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        disabled={ optionsDisabled }\n        onClick={ this.calculateScore }\n      >\n        {questionList[qNum].correct_answer}\n      </button>\n    );\n\n    const incorrects = questionList[qNum].incorrect_answers.map(\n      (resp, index) => (\n        <button\n          className=\"btn\"\n          data-answer=\"incorrect\"\n          key={ index }\n          type=\"button\"\n          data-testid={ `wrong-answer-${index}` }\n          disabled={ optionsDisabled }\n        >\n          {resp}\n        </button>),\n    );\n    const answersArray = [correct, ...incorrects];\n    const answerArray2 = [...incorrects, correct];\n    const random = Math.random();\n    const randomLimit = 0.55;\n\n    if (random < randomLimit) {\n      return answersArray;\n    }\n    return answerArray2;\n  }\n\n  handleClick = ({ target }) => {\n    if (!target.type) return null;\n    const parent = target.parentElement;\n    const children = Array.from(parent.children);\n\n    children.forEach((btn) => {\n      if (btn.dataset.answer === 'correct') {\n        btn.style.border = '3px solid rgb(6 ,240, 15)';\n      } else {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n    this.setState({ nextQuestion: true });\n  }\n\n  renderText = (title) => {\n    const { questionList, qNum } = this.state;\n    if (questionList[qNum]) return questionList[qNum][`${title}`];\n    return null;\n  }\n\n  handleClickNext = () => {\n    const { qNum } = this.state;\n    const three = 3;\n    if (qNum > three) {\n      this.setState({ endQuestions: true });\n    } else {\n      this.setState({\n        qNum: qNum + 1,\n        nextQuestion: true,\n        time: 30,\n        optionsDisabled: false }, () => this.timer());\n    }\n  }\n\n  timer = () => {\n    const ONE_SECOND = 1000;\n    const interval = setInterval(() => {\n      this.setState((state) => ({ time: state.time - 1 }), () => {\n        const { time } = this.state;\n        if (time === 0) {\n          this.setState({ optionsDisabled: true }, () => clearInterval(interval));\n        }\n      });\n    }, ONE_SECOND);\n  }\n\n  render() {\n    const { time, loaded, nextQuestion, endQuestions } = this.state;\n    return (\n      <>\n        <Header />\n        <section className=\"game-container\">\n          <div className=\"questions-container\">\n            <p data-testid=\"question-category\">{ this.renderText('category') }</p>\n            <p data-testid=\"question-text\">{ this.renderText('question') }</p>\n            <p>{ `Tempo restante: ${time}` }</p>\n\n            <div\n              role=\"presentation\"\n              type=\"div\"\n              data-testid=\"answer-options\"\n              onClick={ this.handleClick }\n            >\n              { loaded && this.renderQuestions() }\n\n            </div>\n\n            <div>\n              { endQuestions && <Redirect to=\"/feedback\" /> }\n              { nextQuestion && (\n                <button\n                  type=\"button\"\n                  data-testid=\"btn-next\"\n                  onClick={ this.handleClickNext }\n                >\n                  Próximo\n                </button>)}\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\n\nGameShuffle.propTypes = {\n  history: PropTypes.objectOf(PropTypes.any),\n  storeScoreDispatch: PropTypes.func,\n}.isRequired;\n\nconst mapDispatchToProps = (dispatch) => ({\n  storeScoreDispatch: (payload) => dispatch(storeScore(payload)),\n});\n\nexport default connect(null, mapDispatchToProps)(GameShuffle);\n","// Funcionalidades\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n// Importações\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport GameShuffle from './pages/GameShuffle';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Route path=\"/game\" component={ Game } />\n        <Route path=\"/feedback\" component={ Feedback } />\n        <Route path=\"/ranking\" component={ Ranking } />\n        <Route path=\"/shuffle\" component={ GameShuffle } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","import { STORE_PLAYER, STORE_SCORE } from '../actions/index';\n\nconst DEFAULT_STATE = {\n  name: 'Anderson',\n  assertions: 0,\n  score: 10,\n  gravatarEmail: '',\n};\n\nconst playerReducer = (state = DEFAULT_STATE, action) => {\n  switch (action.type) {\n  case STORE_PLAYER:\n    return {\n      ...state,\n      gravatarEmail: action.payload.email,\n      name: action.payload.name,\n      photoUrl: action.payload.photo,\n      score: 0,\n    };\n  case STORE_SCORE:\n    return {\n      ...state,\n      score: state.score + action.payload,\n      assertions: state.assertions + 1,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default playerReducer;\n","import { combineReducers } from 'redux';\nimport player from './player';\n\nconst rootReducer = combineReducers({ player });\n\nexport default rootReducer;\n","import { legacy_createStore as createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport reduxThunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer, {},\n  composeWithDevTools(applyMiddleware(reduxThunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","// Funcionalidades\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\n// Importações\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}